<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ask.qa_service.dao.AskUserExtDao">
    <resultMap id="BaseResultMap" type="com.ask.qa_service.entity.po.AskUserExtPo">
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="user_id" jdbcType="VARCHAR" property="userId"/>
        <result column="gold_badges" jdbcType="INTEGER" property="goldBadges"/>
        <result column="silver_badges" jdbcType="INTEGER" property="silverBadges"/>
        <result column="bronze_badges" jdbcType="INTEGER" property="bronzeBadges"/>
        <result column="reputation_score" jdbcType="INTEGER" property="reputationScore"/>
        <result column="created_by" jdbcType="VARCHAR" property="createdBy"/>
        <result column="created_time" jdbcType="TIMESTAMP" property="createdTime"/>
        <result column="updated_by" jdbcType="VARCHAR" property="updatedBy"/>
        <result column="updated_time" jdbcType="TIMESTAMP" property="updatedTime"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, user_id, gold_badges, silver_badges, bronze_badges, reputation_score, created_by,
      created_time, updated_by, updated_time
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from try_ask.ask_user_ext
        where id = #{id,jdbcType=VARCHAR}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
        delete
        from try_ask.ask_user_ext
        where id = #{id,jdbcType=VARCHAR}
    </delete>

    <insert id="insert" parameterType="com.ask.qa_service.entity.po.AskUserExtPo">
        insert into try_ask.ask_user_ext (id,
                                          user_id,
                                          gold_badges,
                                          silver_badges,
                                          bronze_badges,
                                          reputation_score,
                                          created_by,
                                          created_time,
                                          updated_by,
                                          updated_time)
        values (#{id,jdbcType=VARCHAR},
                #{userId,jdbcType=VARCHAR},
                #{goldBadges,jdbcType=INTEGER},
                #{silverBadges,jdbcType=INTEGER},
                #{bronzeBadges,jdbcType=INTEGER},
                #{reputationScore,jdbcType=INTEGER},
                #{createdBy,jdbcType=VARCHAR},
                now(),
                #{updatedBy,jdbcType=VARCHAR},
                now())
    </insert>

    <insert id="insertSelective" parameterType="com.ask.qa_service.entity.po.AskUserExtPo">
        insert into try_ask.ask_user_ext
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="goldBadges != null">
                gold_badges,
            </if>
            <if test="silverBadges != null">
                silver_badges,
            </if>
            <if test="bronzeBadges != null">
                bronze_badges,
            </if>
            <if test="reputationScore != null">
                reputation_score,
            </if>
            <if test="createdBy != null">
                created_by,
            </if>
            created_time,
            <if test="updatedBy != null">
                updated_by,
            </if>
            updated_time,
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=VARCHAR},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=VARCHAR},
            </if>
            <if test="goldBadges != null">
                #{goldBadges,jdbcType=INTEGER},
            </if>
            <if test="silverBadges != null">
                #{silverBadges,jdbcType=INTEGER},
            </if>
            <if test="bronzeBadges != null">
                #{bronzeBadges,jdbcType=INTEGER},
            </if>
            <if test="reputationScore != null">
                #{reputationScore,jdbcType=INTEGER},
            </if>
            <if test="createdBy != null">
                #{createdBy,jdbcType=VARCHAR},
            </if>
            now(),
            <if test="updatedBy != null">
                #{updatedBy,jdbcType=VARCHAR},
            </if>
            now(),
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.ask.qa_service.entity.po.AskUserExtPo">
        update try_ask.ask_user_ext
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=VARCHAR},
            </if>
            <if test="goldBadges != null">
                gold_badges = #{goldBadges,jdbcType=INTEGER},
            </if>
            <if test="silverBadges != null">
                silver_badges = #{silverBadges,jdbcType=INTEGER},
            </if>
            <if test="bronzeBadges != null">
                bronze_badges = #{bronzeBadges,jdbcType=INTEGER},
            </if>
            <if test="reputationScore != null">
                reputation_score = #{reputationScore,jdbcType=INTEGER},
            </if>
            <if test="updatedBy != null">
                updated_by = #{updatedBy,jdbcType=VARCHAR},
            </if>
            <if test="updatedTime != null">
                updated_time = #{updatedTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.ask.qa_service.entity.po.AskUserExtPo">
        update try_ask.ask_user_ext
        set user_id          = #{userId,jdbcType=VARCHAR},
            gold_badges      = #{goldBadges,jdbcType=INTEGER},
            silver_badges    = #{silverBadges,jdbcType=INTEGER},
            bronze_badges    = #{bronzeBadges,jdbcType=INTEGER},
            reputation_score = #{reputationScore,jdbcType=INTEGER},
            updated_by       = #{updatedBy,jdbcType=VARCHAR},
            updated_time     = #{updatedTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=VARCHAR}
    </update>
</mapper>